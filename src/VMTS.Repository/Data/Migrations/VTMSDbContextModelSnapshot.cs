// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VMTS.Repository.Data;

#nullable disable

namespace VMTS.Repository.Data.Migrations
{
    [DbContext(typeof(VTMSDbContext))]
    partial class VTMSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FaultReport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FaultAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FaultType")
                        .HasColumnType("int");

                    b.Property<int>("FuelRefile")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TripId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("TripId")
                        .IsUnique();

                    b.HasIndex("VehicleId");

                    b.ToTable("FaultReports");
                });

            modelBuilder.Entity("MaintenanceInitialReportPart", b =>
                {
                    b.Property<string>("MaintenanceInitialReportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MissingPartsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MaintenanceInitialReportId", "MissingPartsId");

                    b.HasIndex("MissingPartsId");

                    b.ToTable("MaintenanceInitialReportPart");
                });

            modelBuilder.Entity("TripRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DestinationLatitude")
                        .HasColumnType("float");

                    b.Property<string>("DestinationLocationNominatimLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DestinationLongitude")
                        .HasColumnType("float");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ManagerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PickupLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PickupLocationLatitude")
                        .HasColumnType("float");

                    b.Property<double>("PickupLocationLongitude")
                        .HasColumnType("float");

                    b.Property<string>("PickupLocationNominatimLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("TripsRequests");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Identity.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Address");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("MustChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NationalId")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("AppUser");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Maintenace.MaintenaceCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Categorty")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MaintenanceCategories");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Maintenace.MaintenaceRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaintenanceCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ManagerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MechanicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceCategoryId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("MechanicId");

                    b.HasIndex("VehicleId");

                    b.ToTable("MaintenanceRequests");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Maintenace.MaintenanceFinalReport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FinishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InitialReportId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaintenaceRequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaintenanceCategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MechanicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("InitialReportId")
                        .IsUnique();

                    b.HasIndex("MaintenaceRequestId")
                        .IsUnique();

                    b.HasIndex("MaintenanceCategoryId");

                    b.HasIndex("MechanicId");

                    b.HasIndex("VehicleId");

                    b.ToTable("MaintenanceFinalReport");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Maintenace.MaintenanceFinalReportParts", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("KMAtChange")
                        .HasColumnType("int");

                    b.Property<string>("MaintnenanceFinalReportId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("VehicleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MaintnenanceFinalReportId");

                    b.HasIndex("PartId");

                    b.HasIndex("VehicleId");

                    b.ToTable("MaintenanceFinalReportParts");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Maintenace.MaintenanceInitialReport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ExpectedCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly>("ExpectedFinishDate")
                        .HasColumnType("date");

                    b.Property<string>("MaintenanceCategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaintenanceRequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MechanicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceCategoryId");

                    b.HasIndex("MaintenanceRequestId")
                        .IsUnique();

                    b.HasIndex("MechanicId");

                    b.HasIndex("VehicleId");

                    b.ToTable("MaintenanceInitialReport");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Maintenace.MaintenanceInitialReportParts", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaintnenanceInitialReportId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaintnenanceInitialReportId");

                    b.HasIndex("PartId");

                    b.ToTable("MaintenanceInitialReportParts");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Maintenace.MaintenanceTracking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAlmostDue")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDue")
                        .HasColumnType("bit");

                    b.Property<int>("KMAtLastChange")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NextChangeKM")
                        .HasColumnType("int");

                    b.Property<string>("PartId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("VehicleId");

                    b.ToTable("MaintenanceTrackings");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Parts.Part", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("LifeSpanDays")
                        .HasColumnType("int");

                    b.Property<int?>("LifeSpanKM")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Parts.PartCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PartCategories");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Trip.TripReport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("FuelCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FuelRefile")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TripId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("TripId")
                        .IsUnique();

                    b.HasIndex("VehicleId");

                    b.ToTable("TripsReports");
                });

            modelBuilder.Entity("VMTS.Core.Entities.User_Business.BusinessUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BusinessUsers");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Vehicle_Aggregate.Brand", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Vehicle_Aggregate.Vehicle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CurrentOdometerKM")
                        .HasColumnType("int");

                    b.Property<int>("FuelType")
                        .HasColumnType("int");

                    b.Property<DateOnly>("JoinedYear")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastAssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("ModelYear")
                        .HasColumnType("date");

                    b.Property<string>("PalletNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Vehicle_Aggregate.VehicleCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Vehicle_Aggregate.VehicleModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BrandId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FuelEfficiency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("FaultReport", b =>
                {
                    b.HasOne("VMTS.Core.Entities.User_Business.BusinessUser", "Driver")
                        .WithMany("DriverFaultReport")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TripRequest", "Trip")
                        .WithOne("FaultReports")
                        .HasForeignKey("FaultReport", "TripId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VMTS.Core.Entities.Vehicle_Aggregate.Vehicle", "Vehicle")
                        .WithMany("FaultReports")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Trip");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("MaintenanceInitialReportPart", b =>
                {
                    b.HasOne("VMTS.Core.Entities.Maintenace.MaintenanceInitialReport", null)
                        .WithMany()
                        .HasForeignKey("MaintenanceInitialReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VMTS.Core.Entities.Parts.Part", null)
                        .WithMany()
                        .HasForeignKey("MissingPartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TripRequest", b =>
                {
                    b.HasOne("VMTS.Core.Entities.User_Business.BusinessUser", "Driver")
                        .WithMany("DriverTripRequest")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VMTS.Core.Entities.User_Business.BusinessUser", "Manager")
                        .WithMany("ManagerTripRequest")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VMTS.Core.Entities.Vehicle_Aggregate.Vehicle", "Vehicle")
                        .WithMany("TripRequests")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Manager");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Identity.Address", b =>
                {
                    b.HasOne("VMTS.Core.Entities.Identity.AppUser", null)
                        .WithOne("Address")
                        .HasForeignKey("VMTS.Core.Entities.Identity.Address", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VMTS.Core.Entities.Maintenace.MaintenaceRequest", b =>
                {
                    b.HasOne("VMTS.Core.Entities.Maintenace.MaintenaceCategory", "MaintenanceCategory")
                        .WithMany()
                        .HasForeignKey("MaintenanceCategoryId");

                    b.HasOne("VMTS.Core.Entities.User_Business.BusinessUser", "Manager")
                        .WithMany("ManagerMaintenaceRequests")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VMTS.Core.Entities.User_Business.BusinessUser", "Mechanic")
                        .WithMany("MechanicMaintenaceRequests")
                        .HasForeignKey("MechanicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VMTS.Core.Entities.Vehicle_Aggregate.Vehicle", "Vehicle")
                        .WithMany("MaintenaceRequests")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenanceCategory");

                    b.Navigation("Manager");

                    b.Navigation("Mechanic");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Maintenace.MaintenanceFinalReport", b =>
                {
                    b.HasOne("VMTS.Core.Entities.Maintenace.MaintenanceInitialReport", "InitialReport")
                        .WithOne()
                        .HasForeignKey("VMTS.Core.Entities.Maintenace.MaintenanceFinalReport", "InitialReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VMTS.Core.Entities.Maintenace.MaintenaceRequest", "MaintenaceRequest")
                        .WithOne("FinalReport")
                        .HasForeignKey("VMTS.Core.Entities.Maintenace.MaintenanceFinalReport", "MaintenaceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VMTS.Core.Entities.Maintenace.MaintenaceCategory", "MaintenanceCategory")
                        .WithMany()
                        .HasForeignKey("MaintenanceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VMTS.Core.Entities.User_Business.BusinessUser", "Mechanic")
                        .WithMany("MechanicMaintenaceFinalReports")
                        .HasForeignKey("MechanicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VMTS.Core.Entities.Vehicle_Aggregate.Vehicle", "Vehicle")
                        .WithMany("MaintenaceFinalReports")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InitialReport");

                    b.Navigation("MaintenaceRequest");

                    b.Navigation("MaintenanceCategory");

                    b.Navigation("Mechanic");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Maintenace.MaintenanceFinalReportParts", b =>
                {
                    b.HasOne("VMTS.Core.Entities.Maintenace.MaintenanceFinalReport", "FinalReport")
                        .WithMany("ChangedParts")
                        .HasForeignKey("MaintnenanceFinalReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VMTS.Core.Entities.Parts.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VMTS.Core.Entities.Vehicle_Aggregate.Vehicle", "Vehicle")
                        .WithMany("MaintenanceFinalReportParts")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FinalReport");

                    b.Navigation("Part");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Maintenace.MaintenanceInitialReport", b =>
                {
                    b.HasOne("VMTS.Core.Entities.Maintenace.MaintenaceCategory", "MaintenanceCategory")
                        .WithMany()
                        .HasForeignKey("MaintenanceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VMTS.Core.Entities.Maintenace.MaintenaceRequest", "MaintenanceRequest")
                        .WithOne("InitialReport")
                        .HasForeignKey("VMTS.Core.Entities.Maintenace.MaintenanceInitialReport", "MaintenanceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VMTS.Core.Entities.User_Business.BusinessUser", "Mechanic")
                        .WithMany("MechanicMaintenaceInitialReports")
                        .HasForeignKey("MechanicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VMTS.Core.Entities.Vehicle_Aggregate.Vehicle", "Vehicle")
                        .WithMany("MaintenaceInitialReports")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MaintenanceCategory");

                    b.Navigation("MaintenanceRequest");

                    b.Navigation("Mechanic");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Maintenace.MaintenanceInitialReportParts", b =>
                {
                    b.HasOne("VMTS.Core.Entities.Maintenace.MaintenanceInitialReport", "InitialReport")
                        .WithMany("ExpectedChangedParts")
                        .HasForeignKey("MaintnenanceInitialReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VMTS.Core.Entities.Parts.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InitialReport");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Maintenace.MaintenanceTracking", b =>
                {
                    b.HasOne("VMTS.Core.Entities.Parts.Part", "Part")
                        .WithMany("MaintenancePartTrackings")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VMTS.Core.Entities.Vehicle_Aggregate.Vehicle", "Vehicle")
                        .WithMany("MaintenanceTrackings")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Trip.TripReport", b =>
                {
                    b.HasOne("VMTS.Core.Entities.User_Business.BusinessUser", "Driver")
                        .WithMany("DriverTripReport")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TripRequest", "Trip")
                        .WithOne("TripReports")
                        .HasForeignKey("VMTS.Core.Entities.Trip.TripReport", "TripId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VMTS.Core.Entities.Vehicle_Aggregate.Vehicle", "Vehicle")
                        .WithMany("TripReports")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Trip");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Vehicle_Aggregate.Vehicle", b =>
                {
                    b.HasOne("VMTS.Core.Entities.Vehicle_Aggregate.VehicleModel", "VehicleModel")
                        .WithMany("Vehicle")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Vehicle_Aggregate.VehicleModel", b =>
                {
                    b.HasOne("VMTS.Core.Entities.Vehicle_Aggregate.Brand", "Brand")
                        .WithMany("VehicleModels")
                        .HasForeignKey("BrandId");

                    b.HasOne("VMTS.Core.Entities.Vehicle_Aggregate.VehicleCategory", "Category")
                        .WithMany("VehicleModels")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TripRequest", b =>
                {
                    b.Navigation("FaultReports")
                        .IsRequired();

                    b.Navigation("TripReports")
                        .IsRequired();
                });

            modelBuilder.Entity("VMTS.Core.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("VMTS.Core.Entities.Maintenace.MaintenaceRequest", b =>
                {
                    b.Navigation("FinalReport")
                        .IsRequired();

                    b.Navigation("InitialReport")
                        .IsRequired();
                });

            modelBuilder.Entity("VMTS.Core.Entities.Maintenace.MaintenanceFinalReport", b =>
                {
                    b.Navigation("ChangedParts");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Maintenace.MaintenanceInitialReport", b =>
                {
                    b.Navigation("ExpectedChangedParts");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Parts.Part", b =>
                {
                    b.Navigation("MaintenancePartTrackings");
                });

            modelBuilder.Entity("VMTS.Core.Entities.User_Business.BusinessUser", b =>
                {
                    b.Navigation("DriverFaultReport");

                    b.Navigation("DriverTripReport");

                    b.Navigation("DriverTripRequest");

                    b.Navigation("ManagerMaintenaceRequests");

                    b.Navigation("ManagerTripRequest");

                    b.Navigation("MechanicMaintenaceFinalReports");

                    b.Navigation("MechanicMaintenaceInitialReports");

                    b.Navigation("MechanicMaintenaceRequests");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Vehicle_Aggregate.Brand", b =>
                {
                    b.Navigation("VehicleModels");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Vehicle_Aggregate.Vehicle", b =>
                {
                    b.Navigation("FaultReports");

                    b.Navigation("MaintenaceFinalReports");

                    b.Navigation("MaintenaceInitialReports");

                    b.Navigation("MaintenaceRequests");

                    b.Navigation("MaintenanceFinalReportParts");

                    b.Navigation("MaintenanceTrackings");

                    b.Navigation("TripReports");

                    b.Navigation("TripRequests");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Vehicle_Aggregate.VehicleCategory", b =>
                {
                    b.Navigation("VehicleModels");
                });

            modelBuilder.Entity("VMTS.Core.Entities.Vehicle_Aggregate.VehicleModel", b =>
                {
                    b.Navigation("Vehicle");
                });
#pragma warning restore 612, 618
        }
    }
}
